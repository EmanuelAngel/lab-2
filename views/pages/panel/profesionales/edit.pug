extends ../../../layouts/base-layout
include ../../../lib/BaseUserForm

block navbar
  include ../../../lib/NavBar

block styles 
  style.
    .especialidad-item {
      border: 1px solid #404040;
      padding: 1rem;
      margin-bottom: 1rem;
      border-radius: 0.3rem;
    }

block content
  +baseUserForm({
    formId: 'profesionalForm',
    title: 'Editar Profesional',
    returnUrl: '/panel/profesionales',
    submitText: 'Actualizar Profesional',
    initialData: profesional
  })
    input(type="hidden" name="id_profesional" value=profesional.id_profesional)
    
    // Especialidades
    h4.mb-3.mt-4 Especialidades
    #especialidades-container
      // Template para una especialidad
      template#especialidad-template
        .especialidad-item
          .row
            .col-md-5.mb-3
              label.form-label Especialidad *
              select.form-control.especialidad-select(required)
                option(value="") Seleccione una especialidad
                each especialidad in especialidades
                  option(value=especialidad.id_especialidad)= especialidad.nombre
            .col-md-5.mb-3
              label.form-label Matrícula *
              input.form-control.matricula-input(type="text", required)
            .col-md-2.mb-3.d-flex.align-items-end
              button.btn.btn-outline-danger.border-0.remove-especialidad(type="button")
                i.bi.bi-trash

      // Especialidades existentes
      each especialidadProf in profesional.especialidades
        .especialidad-item
          .row
            .col-md-5.mb-3
              label.form-label Especialidad *
              select.form-control.especialidad-select(required)
                option(value="") Seleccione una especialidad
                each especialidad in especialidades
                  option(
                    value=especialidad.id_especialidad
                    selected=especialidad.id_especialidad === especialidadProf.id_especialidad
                  )= especialidad.nombre
            .col-md-5.mb-3
              label.form-label Matrícula *
              input.form-control.matricula-input(
                type="text"
                required
                value=especialidadProf.matricula
              )
            .col-md-2.mb-3.d-flex.align-items-end
              button.btn.btn-outline-danger.border-0.remove-especialidad(type="button")
                i.bi.bi-trash
    
    .mb-3
      button#addEspecialidad.btn.btn-secondary(type="button")
        i.bi.bi-plus-circle.me-2
        | Agregar Especialidad

block scripts
  script(type="module").
    import { validateField, baseValidationRules } from '/js/baseValidation.js'
    import { showToast } from '/js/showToast.js'

    // Validaciones específicas para profesional
    const especialidadRules = {
      matricula: {
        required: true,
        minLength: 3,
        message: 'La matrícula debe tener al menos 3 caracteres'
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      const form = document.querySelector('#profesionalForm')
      const addEspecialidadBtn = document.querySelector('#addEspecialidad')
      const especialidadesContainer = document.querySelector('#especialidades-container')
      const especialidadTemplate = document.querySelector('#especialidad-template')
      const profesionalId = form.querySelector('input[name="id_profesional"]').value

      // Configurar validación en línea para campos base
      form.querySelectorAll('input').forEach(field => {
        // No validamos contraseña en edición si está vacía
        if (field.id === 'contrasenia') return

        field.addEventListener('input', () => validateField(field, baseValidationRules))
        field.addEventListener('blur', () => validateField(field, baseValidationRules))
      })

      // Setup inicial y manejo de especialidades
      function setupEspecialidadListeners(especialidadItem) {
        const removeBtn = especialidadItem.querySelector('.remove-especialidad')
        const matriculaInput = especialidadItem.querySelector('.matricula-input')
        const especialidadSelect = especialidadItem.querySelector('.especialidad-select')

        // Validación en línea para matrícula
        if (matriculaInput) {
          matriculaInput.addEventListener('input', () => 
            validateField(matriculaInput, especialidadRules)
          )
          matriculaInput.addEventListener('blur', () => 
            validateField(matriculaInput, especialidadRules)
          )
        }

        // Validación en línea para select de especialidad
        if (especialidadSelect) {
          especialidadSelect.addEventListener('change', () => {
            if (!especialidadSelect.value) {
              especialidadSelect.classList.add('is-invalid')
            } else {
              especialidadSelect.classList.remove('is-invalid')
            }
          })
        }

        if (removeBtn) {
          removeBtn.addEventListener('click', () => {
            if (document.querySelectorAll('.especialidad-item').length > 1) {
              especialidadItem.remove()
            } else {
              showToast('Debe mantener al menos una especialidad', 'warning')
            }
          })
        }
      }

      // Configurar especialidades existentes
      document.querySelectorAll('.especialidad-item').forEach(setupEspecialidadListeners)

      // Agregar nueva especialidad
      addEspecialidadBtn.addEventListener('click', () => {
        const newEspecialidad = especialidadTemplate.content.cloneNode(true)
        setupEspecialidadListeners(newEspecialidad.querySelector('.especialidad-item'))
        especialidadesContainer.appendChild(newEspecialidad)
      })

      // Validar especialidades
      function validateEspecialidades() {
        let isValid = true
        document.querySelectorAll('.especialidad-item').forEach(esp => {
          const select = esp.querySelector('.especialidad-select')
          const matricula = esp.querySelector('.matricula-input')

          if (!select.value) {
            select.classList.add('is-invalid')
            isValid = false
          }

          if (!validateField(matricula, especialidadRules)) {
            isValid = false
          }
        })
        return isValid
      }

      // Validar todos los campos base excepto contraseña
      function validateBaseFields() {
        let isValid = true
        form.querySelectorAll('input').forEach(field => {
          if (field.id === 'contrasenia') return
          if (!validateField(field, baseValidationRules)) {
            isValid = false
          }
        })
        return isValid
      }

      // Obtener datos del formulario
      function getFormData() {
        const formData = new FormData(form)
        const data = {
          nombre_usuario: formData.get('nombre_usuario'),
          nombre: formData.get('nombre'),
          apellido: formData.get('apellido'),
          dni: formData.get('dni'),
          email: formData.get('email'),
          telefono: formData.get('telefono'),
          direccion: formData.get('direccion'),
          especialidades: []
        }

        // Solo incluir contraseña si se proporcionó una nueva
        const contraseña = formData.get('contrasenia')
        if (contraseña) {
          data.contraseña = contraseña
        }

        // Obtener especialidades
        document.querySelectorAll('.especialidad-item').forEach(esp => {
          const especialidad_id = parseInt(esp.querySelector('.especialidad-select').value)
          const matricula = esp.querySelector('.matricula-input').value
          data.especialidades.push({ especialidad_id, matricula })
        })

        return data
      }

      // Manejar envío del formulario
      form.addEventListener('submit', async (e) => {
        e.preventDefault()

        // Validar campos
        if (!validateBaseFields() || !validateEspecialidades()) {
          return
        }

        const submitButton = form.querySelector('button[type="submit"]')
        submitButton.disabled = true
        submitButton.innerHTML = `
          <span class="spinner-border spinner-border-sm" role="status"></span>
          Actualizando...
        `

        try {
          const data = getFormData()
          const response = await fetch(`/profesionales/${profesionalId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
          })

          if (!response.ok) {
            const errorData = await response.json()
            throw new Error(errorData.error || 'Error al actualizar el profesional')
          }

          showToast('Profesional actualizado exitosamente', 'success')
          
          setTimeout(() => {
            window.location.href = '/panel/profesionales'
          }, 1500)

        } catch (error) {
          showToast(error.message, 'danger')
          console.error('Error:', error)
          submitButton.disabled = false
          submitButton.textContent = 'Actualizar Profesional'
        }
      })
    })